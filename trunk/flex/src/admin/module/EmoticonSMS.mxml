<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  width="100%" minHeight="600" currentState="thema" xmlns:lib="lib.*">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		*
		{
			font-family: Dotum;
			color:#000000;
		}
	</fx:Style>
	<fx:Metadata>
		[Event(name="clickMessage", type="lib.CustomEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import lib.BooleanAndDescriptionVO;
			import lib.CustomEvent;
			import lib.RO;
			import lib.SLibrary;
			
			import mx.collections.ArrayCollection;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var ro:RO = new RO();
			private var RO_DESTINATION:String = "WEB";
			[Bindable]private var gubun:String = "테마문자";
			private var cate:String = "";
			
			private var currTotalCount:int = 0;
			
			private var al:ArrayCollection =  new ArrayCollection();
			private var ac:ArrayCollection = new ArrayCollection();
			[Binable] public var bMy:Boolean = false;
			
			protected function cateList_creationCompleteHandler():void {
				
				// 저장문자시 카테고리 안가져옴
				if (gubun == "my") {
					getEmotiList();
				}
				else {
					ro.set(RO_DESTINATION, cateList_ResultEventHandler);
					ro.method.getEmotiCateList(gubun);
				}
			}
			
			private function cateList_ResultEventHandler(event:ResultEvent):void {
				
				var arr:Array = event.result as Array;
				ac = new ArrayCollection(arr);
				cateList.dataProvider = ac;
				cbCate.dataProvider = ac;
				cbCate.textInput.text = "";
				getEmotiList();
			}
			
			protected function getEmotiList():void {
				
				ro.set(RO_DESTINATION, emoti_ResultEventHandler);
				ro.method.getEmotiCatePage(gubun, cate, 0, paging.viewDataCount);
			}
			protected function getMyList():void {
				
				ro.set(RO_DESTINATION, emoti_ResultEventHandler);
				ro.method.getEmotiCatePage(gubun, cate, 0, paging.viewDataCount);
			}
			protected function emoti_ResultEventHandler(event:ResultEvent):void {
				
				al = event.result as ArrayCollection;
				
				
				if (al != null && al.length > 0) {
					paging.totalDataCount = Object(al.getItemAt(0)).cnt;
					
					if (currTotalCount != paging.totalDataCount)paging.init();
					currTotalCount = paging.totalDataCount;
				}
				
				emotiList.dataProvider = al;
				
			}
			
			
			protected function paging_clickPageHandler(event:CustomEvent):void {
				
				ro.method.getEmotiCatePage(gubun, cate, event.obj, paging.viewDataCount);
			}
			
			// 종류변경
			protected function emti_changeHandler(idx:Number):void {
				
				if (idx == 0) { gubun = "업종별문자"; currentState = "upjong";cate=""; }
				else if (idx == 1) { gubun = "테마문자"; currentState = "thema";cate=""; }
				else if (idx == 2) { gubun = "my"; currentState = "save";cate=""; }
				
				cateList_creationCompleteHandler()
				
			}
			
			public function deleteSave(idx:int):void {
				ro.set(RO_DESTINATION, delete_ResultEventHandler);
				ro.method.delMymsg(idx);
			}
			
			private function delete_ResultEventHandler(event:ResultEvent):void {
				
				var b:BooleanAndDescriptionVO = event.result as BooleanAndDescriptionVO;
				
				if (b.bResult == true) {
					ExternalInterface.call("alert","삭제 되었습니다.");
					cateList_creationCompleteHandler();
				}
			}
			
			
			
			private var _currentByte:int = 0;
			private var _maxByte:int = 90;
			
			public function get currentByte():int {	return _currentByte; }
			public function set currentByte(value:int):void	{ _currentByte = value; this.IByteLabel.text = String( value );	}
			
			public function get maxByte():int { return _maxByte; }
			public function set maxByte(value:int):void	{ _maxByte = value; }
			
			public function getMessaget():String{ return inputEmt.text; }
			
			public function bLimitMessage():Boolean { return this.currentByte < 0; }
			
			public function cutLimitMessage():String{ return SLibrary.cutByteTo(inputEmt.text, 80); }
			
			public function setMessage(message:String):void{ 
				
				this.inputEmt.text = message;
				IMessage_ByteCheck();
			}
			
			public function IMessage_ByteCheck():void {
				
				this.currentByte = SLibrary.remainByte(SLibrary.getByte(this.getMessaget()),this.maxByte);
			}
			protected function IMessage_keyUpHandler(event:KeyboardEvent):void
			{
				IMessage_ByteCheck();
				if (bLimitMessage()) {
					setMessage(cutLimitMessage());
					ExternalInterface.call( "alert", String(80)+" byte 이상 메시지가 삭제 되었습니다.");
				}
			}
			
			
			protected function add_clickHandler(event:MouseEvent):void
			{
				ro.set(RO_DESTINATION, add_ResultEventHandler);
				var obj:Object = cbCate.selectedItem;
				if (obj == null){
					ExternalInterface.call("alert", "카테고리를 입력 또는 선택 하세요.");
				}else 
					ro.method.addEmotiCate(gubun, cbCate.selectedItem, inputEmt.text);
			}
			
			private function add_ResultEventHandler(event:ResultEvent):void {
				
				SLibrary.alert("저장되었습니다." );
				inputEmt.text = "";
				IMessage_keyUpHandler(null);
				cateList_creationCompleteHandler();
			}
			
			protected function cateList_changeHandler(event:IndexChangeEvent):void
			{
				this.cate = cateList.selectedItem as String;
				getEmotiList();
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="upjong"/>
		<s:State name="thema"/>
		<s:State name="save"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%" height="100%">
		<s:VGroup width="200">
			<s:Group width="142" height="200" >
				<s:TextArea id="inputEmt" left="5" right="5" top="5" bottom="5" height="100" keyUp="IMessage_keyUpHandler(event)" />
			</s:Group>
			<s:Label id="IByteLabel" width="100%" text="90" textAlign="right" fontSize="12" verticalCenter="0"/>	
			<s:Label text="{gubun}"/>
			<s:ComboBox id="cbCate" width="100%" prompt="카테고리입력 또는 선택"/>
			<s:Button label="추가" width="100%" click="add_clickHandler(event)"/>
		</s:VGroup>
		
		<s:Group top="20" width="100%">
			
			<s:Group top="37" height="700">
				
				<s:VGroup top="11" left="0" right="0" horizontalAlign="center">
					<s:Group id="cateBox" visible.save="false" width="90%" height="86" >
						
						<s:Rect left="0" right="0" top="0" bottom="0" ><s:fill><s:SolidColor color="0xEEE3DD"/></s:fill></s:Rect>
						<s:List id="cateList" change="cateList_changeHandler(event)" left="10" selectionColor="0xffffff" rollOverColor="0xEEE3DD" right="10" height="66" verticalCenter="0" skinClass="skin.ListBg" 
								creationComplete="cateList_creationCompleteHandler()">
							<s:layout><lib:FlowLayout /></s:layout>
						</s:List>
						
					</s:Group>
					
					<s:List id="emotiList" minWidth="620" height="540" skinClass="skin.ListBg" itemRenderer="skin.EmoticonSMSRenderer">
						<s:layout><s:TileLayout horizontalGap="12" verticalGap="10" requestedColumnCount="4"/></s:layout>
					</s:List>
					<lib:Paging id="paging" height="30" clickPage="paging_clickPageHandler(event)" />
				</s:VGroup>
			</s:Group>
			
			<s:HGroup gap="0">
				<s:Image source="/images/pop_imo01.gif" source.thema="/images/pop_imo01_.gif" click="emti_changeHandler(1)" useHandCursor="true" />
				<s:Image source="/images/pop_imo02.gif" source.upjong="/images/pop_imo02_.gif" click="emti_changeHandler(0)" useHandCursor="true" />
			</s:HGroup>
		</s:Group>
		
	</s:HGroup>
</s:Module>
